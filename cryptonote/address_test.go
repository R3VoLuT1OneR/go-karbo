package cryptonote

import (
	"encoding/hex"
	"github.com/r3volut1oner/go-karbo/crypto"
	"testing"

	"github.com/stretchr/testify/assert"
)

var testAddressCompilation = []*struct {
	address        string
	publicSpendKey string
	publicViewKey  string
}{
	{
		"KiAe1HTejHad5mgdQGSxuWZAFuCLo7KkhVJkHTwrxMFSWHgj1FvajVNXsAwjo7PYdpBon3qJREB7iMDAGWCtqvRjFoCrBVD",
		"dbbd38087aa091d7b8bf36d30d4059c0450ac73c9ac5dea93af77d1e6cd7fdaf",
		"197b9cfc60e48db887a94cc359c2c3409b998b88d7241578d35b41a66df15e83",
	},
}

var encodeDecodeAddr = []*struct {
	addr string
	tag  uint64
	data []byte
}{
	{"21D35quxec71111111111111111111111111111111111111111111111111111111111111111111111111111116Q5tCH", 6, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{"2Aui6ejTFscjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQVqegMoV", 6, []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}},
	{"1119XrkPuSmLzdHXgVgrZKjepg5hZAxffLzdHXgVgrZKjepg5hZAxffLzdHXgVgrZKjepg5hZAxffLzdHXgVgrZKVphZRvn", 0, []byte{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF}},
	{"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111115TXfiA", 0, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{"PuT7GAdgbA83qvSEivPLYo11111111111111111111111111111111111111111111111111111111111111111111111111111169tWrH", 0x1122334455667788, []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{"PuT7GAdgbA841d7FXjswpJjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQjpXCZedGfVQVq4LL1v", 0x1122334455667788, []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}},
	{"PuT7GAdgbA819VwdWVDP", 0x1122334455667788, []byte{0x11}},
	{"PuT7GAdgbA81efAfdCjPg", 0x1122334455667788, []byte{0x22, 0x22}},
	{"PuT7GAdgbA83sryEt3YC8Q", 0x1122334455667788, []byte{0x33, 0x33, 0x33}},
	{"PuT7GAdgbA83tWUuc54PFP3b", 0x1122334455667788, []byte{0x44, 0x44, 0x44, 0x44}},
	{"PuT7GAdgbA83u9zaKrtRKZ1J6", 0x1122334455667788, []byte{0x55, 0x55, 0x55, 0x55, 0x55}},
	{"PuT7GAdgbA83uoWF3eanGG1aRoG", 0x1122334455667788, []byte{0x66, 0x66, 0x66, 0x66, 0x66, 0x66}},
	{"PuT7GAdgbA83vT1umSHMYJ4oNVdu", 0x1122334455667788, []byte{0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77}},
	{"PuT7GAdgbA83w6XaVDyvpoGQBEWbB", 0x1122334455667788, []byte{0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88}},
	{"PuT7GAdgbA83wk3FD1gW7J2KVGofA1r", 0x1122334455667788, []byte{0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99}},
	{"15p2yAV", 0, []byte{}},
	{"FNQ3D6A", 0x7F, []byte{}},
	{"26k9QWweu", 0x80, []byte{}},
	{"3BzAD7n3y", 0xFF, []byte{}},
	{"11efCaY6UjG7JrxuB", 0, []byte{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77}},
	{"21rhHRT48LN4PriP9", 6, []byte{0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77}},
}

var decodeAddrNegative = []*struct {
	addr string
	err  string
}{
	{"zuT7GAdgbA819VwdWVDP", "Block overflow"},
	{"0uT7GAdgbA819VwdWVDP", "invalid character '0' found"},
	{"IuT7GAdgbA819VwdWVDP", "invalid character 'I' found"},
	{"OuT7GAdgbA819VwdWVDP", "invalid character 'O' found"},
	{"luT7GAdgbA819VwdWVDP", "invalid character 'l' found"},
	{string(rune(0x00)) + "uT7GAdgbA819VwdWVDP", "invalid character '\x00' found"},
	{"PuT7GAdgbA819VwdWVD", "invalid block size"},
	{"11efCaY6UjG7JrxuC", "invalid checksum"},
	// {"jerj2e4mESo", "handles_non_correct_tag"}, // "jerj2e4mESo" == "\xFF\x00\xFF\xFF\x5A\xD9\xF1\x1C"
	{"1", "invalid block size"},
	{"1111", "invalid block size"},
	{"11", "Decoded size is too short 1"},
	{"111", "Decoded size is too short 2"},
	{"11111", "Decoded size is too short 3"},
	{"111111", "Decoded size is too short 4"},
	{"999999", "Block overflow"},
	{"ZZZZZZ", "Block overflow"},
}

func TestAddressFromString(t *testing.T) {
	for _, td := range testAddressCompilation {
		var address Address
		err := address.FromString(td.address)

		assert.Nil(t, err)
		assert.Equal(t, td.address, address.Base58())
		assert.Equal(t, td.publicSpendKey, hex.EncodeToString(address.SpendPublicKey[:]))
		assert.Equal(t, td.publicViewKey, hex.EncodeToString(address.ViewPublicKey[:]))
		assert.Equal(t, uint64(111), address.Tag)
	}
}

func TestAddressGenerate(t *testing.T) {
	for _, td := range testAddressCompilation {

		publicSpendKeyBytes, _ := hex.DecodeString(td.publicSpendKey)
		publicViewKeyBytes, _ := hex.DecodeString(td.publicViewKey)

		var publicSpendKey crypto.PublicKey
		copy(publicSpendKey[:], publicSpendKeyBytes[:])

		var publicViewKey crypto.PublicKey
		copy(publicViewKey[:], publicViewKeyBytes[:])

		address := NewAddress(uint64(111), publicSpendKey, publicViewKey)

		assert.Equal(t, td.address, address.Base58())
		assert.Equal(t, td.publicSpendKey, hex.EncodeToString(address.SpendPublicKey[:]))
		assert.Equal(t, td.publicViewKey, hex.EncodeToString(address.ViewPublicKey[:]))
		assert.Equal(t, uint64(111), address.Tag)
	}
}

func TestEncodeDecodeAddr(t *testing.T) {
	for _, td := range encodeDecodeAddr {
		rencode := addressEncode(td.tag, td.data)

		assert.Equal(t, td.addr, rencode)

		tag, data, err := addressDecode(rencode)

		assert.Nil(t, err)
		assert.Equal(t, td.tag, tag)
		assert.Equal(t, td.data, data)
	}
}

func TestDecodeAddrNegative(t *testing.T) {
	for _, td := range decodeAddrNegative {
		tag, data, err := addressDecode(td.addr)

		assert.Equal(t, uint64(0), tag)
		assert.Nil(t, data)

		if err != nil {
			assert.Equal(t, td.err, err.Error())
		} else {
			assert.NotNil(t, err)
		}
	}
}
